// Generated by CoffeeScript 2.7.0
(function() {
  // https://ronlinu.github.io/battleship
  var computer, flashSquare, flashSquare2, game, placePlayerShip, player, randomFreeSquare, remainingFreeSquares, remainingOfAllShips, remainingOfOneShip, setWinner, shipTemplate, shootComputerBoard, shootPlayerBoard, showAlert, showShipAsDestroyed;

  game = {
    winner: '', // winner name, also flag for end of game
    previousCode: '' // for computer to remember previous hit
  };

  shipTemplate = {
    destroyer: {
      code: 'D',
      size: 5
    },
    cruiser: {
      code: 'C',
      size: 4
    },
    navette: {
      code: 'N',
      size: 3
    },
    submarine: {
      code: 'S',
      size: 2
    }
  };

  player = JSON.parse(JSON.stringify(shipTemplate)); // player's ships

  computer = JSON.parse(JSON.stringify(shipTemplate)); // computer's ships

  (function() {    
    // ---------------------------------------------------------------------
    // Create player board
    var board, i, results, square, x, y;
    board = document.getElementById('boardPlayer');
    results = [];
    for (y = i = 1; i <= 10; y = ++i) {
      results.push((function() {
        var j, results1;
        results1 = [];
        for (x = j = 1; j <= 10; x = ++j) {
          square = document.createElement('div');
          square.className = 'squarePlayer';
          square.dataset.x = x;
          square.dataset.y = y;
          square.innerHTML = 'X';
          square.style.color = 'lightcyan'; // hide the X
          square.addEventListener('click', function(event) {
            var clickedSquare;
            if (game.winner) {
              return;
            }
            clickedSquare = event.currentTarget;
            return placePlayerShip(clickedSquare);
          });
          results1.push(board.appendChild(square));
        }
        return results1;
      })());
    }
    return results;
  })();

  (function() {    // --------------------------------------
    // Create computer board
    var board, i, results, square, x, y;
    board = document.getElementById('boardComputer');
    results = [];
    for (y = i = 1; i <= 10; y = ++i) {
      results.push((function() {
        var j, results1;
        results1 = [];
        for (x = j = 1; j <= 10; x = ++j) {
          square = document.createElement('div');
          square.className = 'squareComputer';
          square.dataset.x = x;
          square.dataset.y = y;
          square.innerHTML = 'X';
          square.style.color = 'lightcyan'; // hide the X
          square.addEventListener('click', function(event) {
            var clickedSquare;
            if (game.winner) {
              return;
            }
            clickedSquare = event.currentTarget;
            return shootComputerBoard(clickedSquare);
          });
          results1.push(board.appendChild(square));
        }
        return results1;
      })());
    }
    return results;
  })();

  (function() {    // --------------------------------------
    // Place computer ships
    var _, checkSquareNeighbours, clearShip, getRandomCoord, getSquareContent, placeShip, putSquareContent, results, ship;
    getRandomCoord = function(ship) {
      var direction, x, x1, y, y1;
      while (true) {
        // Generate random coordinates/direction that FITS ship size
        x = x1 = Math.floor(Math.random() * 10) + 1;
        y = y1 = Math.floor(Math.random() * 10) + 1;
        direction = Math.floor(Math.random() * 2) + 1;
        if (direction === 1) {
          x1 = x + ship.size - 1;
        } else {
          y1 = y + ship.size - 1;
        }
        if (x1 <= 10 && y1 <= 10) {
          break;
        }
      }
      return {
        x: x,
        y: y,
        direction: direction
      };
    };
    // -----------------------------
    getSquareContent = function(x, y) {
      var square;
      square = document.querySelector(`.squareComputer[data-x='${x}'][data-y='${y}']`);
      if ((square != null) && (square.innerHTML != null)) {
        return square.innerHTML;
      } else {
        return 'X'; // mark as empty if out of range
      }
    };
    
    // -----------------------------
    putSquareContent = function(x, y, code) {
      var square;
      square = document.querySelector(`.squareComputer[data-x='${x}'][data-y='${y}']`);
      if ((square != null) && (square.innerHTML != null)) {
        square.style.color = 'lightcyan';
        return square.innerHTML = code;
      }
    };
    // -----------------------------
    checkSquareNeighbours = function(x, y, code) {
      var free, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;
      // true = if neighbouring squares are free
      free = true;
      if ((ref = getSquareContent(x, y)) !== code && ref !== 'X') {
        free = false;
      } else if ((ref1 = getSquareContent(x + 1, y)) !== code && ref1 !== 'X') {
        free = false;
      } else if ((ref2 = getSquareContent(x - 1, y)) !== code && ref2 !== 'X') {
        free = false;
      } else if ((ref3 = getSquareContent(x, y + 1)) !== code && ref3 !== 'X') {
        free = false;
      } else if ((ref4 = getSquareContent(x, y - 1)) !== code && ref4 !== 'X') {
        free = false;
      } else if ((ref5 = getSquareContent(x - 1, y - 1)) !== code && ref5 !== 'X') {
        free = false;
      } else if ((ref6 = getSquareContent(x - 1, y + 1)) !== code && ref6 !== 'X') {
        free = false;
      } else if ((ref7 = getSquareContent(x + 1, y - 1)) !== code && ref7 !== 'X') {
        free = false;
      } else if ((ref8 = getSquareContent(x + 1, y + 1)) !== code && ref8 !== 'X') {
        free = false;
      }
      return free;
    };
    // -----------------------------
    clearShip = function(ship) {
      var i, results, x, y;
// Clear all occurences of this ship code in computer board
      results = [];
      for (y = i = 1; i <= 10; y = ++i) {
        results.push((function() {
          var j, results1;
          results1 = [];
          for (x = j = 1; j <= 10; x = ++j) {
            if (getSquareContent(x, y) === ship.code) {
              results1.push(putSquareContent(x, y, 'X'));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    };
    // -----------------------------
    placeShip = function(ship) {
      var count, direction, results, x, y;
      // Place one computer ship, check if it doesn't collide with another
      ({x, y, direction} = getRandomCoord(ship)); // starting coordinates
      count = ship.size;
      results = [];
      while (count) {
        if (checkSquareNeighbours(x, y, ship.code)) {
          putSquareContent(x, y, ship.code);
          count--;
          if (direction === 1) {
            results.push(x++);
          } else {
            results.push(y++);
          }
        } else {
          // BUMMER: it's colliding with another ship, start over again
          clearShip(ship);
          count = 0; // stop this search, needed for recursion
          results.push(placeShip(ship)); // try again with new coordinates
        }
      }
      return results;
    };

    // Iterate to place all computer ships
    results = [];
    for (_ in computer) {
      ship = computer[_];
      results.push(placeShip(ship));
    }
    return results;
  })();

  // *********************************************************************
  showAlert = function(title, icon, textalign, msg) {
    return new Promise(function(resolve) {
      return Swal.fire({
        title: title,
        html: `<div style='text-align: ${textalign}; font-size: 16px;'>${msg}</div>`,
        icon: icon,
        confirmButtonText: 'OK',
        position: 'center',
        animation: true,
        willClose: resolve
      });
    });
  };

  // --------------------------------------
  setWinner = function(who) {
    var footer;
    game.winner = who;
    footer = document.getElementById('footer');
    footer.style.color = 'yellow';
    return footer.innerHTML = `${who} wins!<br>Reload the page to play again`;
  };

  // --------------------------------------
  remainingFreeSquares = function(board) {
    var code, i, j, left, square, x, y;
    left = 0;
    for (y = i = 1; i <= 10; y = ++i) {
      for (x = j = 1; j <= 10; x = ++j) {
        square = document.querySelector(`.square${board}[data-x='${x}'][data-y='${y}']`);
        code = square.innerHTML;
        if (code === code.toUpperCase()) {
          left++;
        }
      }
    }
    return left;
  };

  // --------------------------------------
  remainingOfOneShip = function(board, code) {
    var content, i, j, left, square, x, y;
    left = 0;
    for (y = i = 1; i <= 10; y = ++i) {
      for (x = j = 1; j <= 10; x = ++j) {
        square = document.querySelector(`.square${board}[data-x='${x}'][data-y='${y}']`);
        content = square.innerHTML;
        if (content === code) {
          left++;
        }
      }
    }
    return left;
  };

  // --------------------------------------
  remainingOfAllShips = function(board) {
    var code, i, j, left, square, x, y;
    left = 0;
    for (y = i = 1; i <= 10; y = ++i) {
      for (x = j = 1; j <= 10; x = ++j) {
        square = document.querySelector(`.square${board}[data-x='${x}'][data-y='${y}']`);
        code = square.innerHTML;
        if (code !== 'X' && code === code.toUpperCase()) {
          left++;
        }
      }
    }
    return left;
  };

  // --------------------------------------
  randomFreeSquare = function() {
    var code, i, j, remaining, square, x, xy, y;
    remaining = remainingFreeSquares('Player');
    xy = Math.floor(Math.random() * remaining) + 1;
    for (y = i = 1; i <= 10; y = ++i) {
      for (x = j = 1; j <= 10; x = ++j) {
        square = document.querySelector(`.squarePlayer[data-x='${x}'][data-y='${y}']`);
        code = square.innerHTML;
        if (code === code.toUpperCase()) {
          xy--;
        }
        if (xy === 0) {
          return square;
        }
      }
    }
  };

  // --------------------------------------
  placePlayerShip = function(clickedSquare) {
    var _, code, count, msg, results, ship, x, y;
    x = clickedSquare.dataset.x;
    y = clickedSquare.dataset.y;
    code = clickedSquare.innerHTML;
    // Check if all player ships are placed
    count = 0;
    for (_ in player) {
      ship = player[_];
      count += ship.size;
    }
    if (count === 0) {
      if (remainingFreeSquares('Player') === 100) {
        msg = "All your ships are placed.<br>You can start playing.";
      } else {
        msg = "Keep shooting on the Computer board.<br>The game is not over yet.";
      }
      showAlert("", 'warning', 'center', msg);
      return;
    }
    
    // Avoid placing a ship on an occupied square
    if (code !== 'X') {
      showAlert("", 'warning', 'center', "That square is already taken.");
      return;
    }
// Get next un-placed ship part and show it on the player board
    results = [];
    for (_ in player) {
      ship = player[_];
      if (ship.size) {
        clickedSquare.style.backgroundColor = 'cyan';
        clickedSquare.style.color = 'black';
        clickedSquare.innerHTML = ship.code;
        ship.size--;
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  // --------------------------------------
  // -------------------------------------
  showShipAsDestroyed = function(board, code) {
    var content, i, results, square, x, y;
// Scan computer board and change squares background to black only for THIS ship
    results = [];
    for (y = i = 1; i <= 10; y = ++i) {
      results.push((function() {
        var j, results1;
        results1 = [];
        for (x = j = 1; j <= 10; x = ++j) {
          square = document.querySelector(`.square${board}[data-x='${x}'][data-y='${y}']`);
          content = square.innerHTML;
          if (content === code.toLowerCase()) {
            square.style.backgroundColor = 'black';
            results1.push(square.style.color = 'lightcyan');
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  // --------------------------------------
  shootComputerBoard = function(clickedSquare) {
    var _, code, count, ship, x, y;
    count = 0;
    for (_ in player) {
      ship = player[_];
      count += ship.size;
    }
    if (count) {
      showAlert("", 'warning', 'center', "Place ALL your ships in the Player board<br>before you can start playing.");
      return;
    }
    x = clickedSquare.dataset.x;
    y = clickedSquare.dataset.y;
    code = clickedSquare.innerHTML;
    if (code === code.toLowerCase()) {
      showAlert("", 'warning', 'center', "That square has already been shot.");
      return;
    }
    clickedSquare.innerHTML = code.toLowerCase();
    if (code === 'X') {
      clickedSquare.style.color = 'black'; // miss
    } else {
      clickedSquare.style.backgroundColor = 'red'; // hit
      clickedSquare.style.color = 'lightcyan';
      if (remainingOfOneShip('Computer', code) === 0) {
        showShipAsDestroyed('Computer', code);
      }
      
      // If no more computer ships to shoot, player wins!
      if (remainingOfAllShips('Computer') === 0) {
        setWinner('Player');
        showAlert("Bravo!", '', 'center', "YOU WIN!");
      }
    }
    // Keep going with computer move if no winner
    if (game.winner === '') {
      return setTimeout(shootPlayerBoard, 500);
    }
  };

  // --------------------------------------
  // Flash few times a missed player square
  flashSquare = function(square, repeat) {
    repeat--;
    square.style.background = 'black';
    square.style.color = 'lightcyan';
    return setTimeout((function() {
      return flashSquare2(square, repeat);
    }), 250);
  };

  flashSquare2 = function(square, repeat) {
    square.style.background = 'lightcyan';
    square.style.color = 'black';
    if ((0 < repeat && repeat < 5)) {
      return setTimeout((function() {
        return flashSquare(square, repeat);
      }), 250);
    }
  };

  // --------------------------------------
  shootPlayerBoard = function() {
    var code, prev, shootPlayerShip, square;
    shootPlayerShip = function(code) {
      var howManyLeft, i, j, square, x, y;
      // Find next player ship square (uppercase code) and change it to lower case
      // and return how many left to shoot
      howManyLeft = 0;
      for (y = i = 1; i <= 10; y = ++i) {
        for (x = j = 1; j <= 10; x = ++j) {
          square = document.querySelector(`.squarePlayer[data-x='${x}'][data-y='${y}']`);
          if (howManyLeft === 0 && square.innerHTML === code) {
            howManyLeft = 1;
            square.innerHTML = code.toLowerCase();
            square.style.background = 'red';
            square.style.color = 'lightcyan';
          } else if (square.innerHTML === code) {
            howManyLeft++;
          }
        }
      }
      return howManyLeft;
    };
    // ----------------------------------
    prev = game.previousCode;
    if (prev) {
      if (shootPlayerShip(prev) === 1) { // last square destroyed
        showShipAsDestroyed('Player', prev);
        game.previousCode = '';
      }
    } else {
      square = randomFreeSquare();
      code = square.innerHTML;
      if (code === 'X') {
        square.innerHTML = 'x';
        flashSquare(square, 2);
      } else {
        game.previousCode = code;
        shootPlayerShip(code); // first square to destroyed
        console.log(code);
      }
    }
    // Check if computer wins (no more player ship to shoot)
    if (remainingOfAllShips('Player') === 0) {
      setWinner('Computer');
      saver.setWinner = 'Computer';
      return showAlert("Sad!", '', 'center', "The Computer wins!");
    }
  };

  // *********************************************************************
  // ----- Intro message -----
  showAlert("Battleship", '', 'center', `Begin by placing your four ships (shown at top left)<br>
by placing them in the Player board.<br><br>
Click one square at a time and all ships will be placed in succession,
starting with the Destroyer and finishing with the Submarine.<br><br>
Ships cannot touch each other but can touch borders.<br>
They can be placed horizontally or vertically.<br>`);

}).call(this);
