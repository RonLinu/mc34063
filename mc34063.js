// Generated by CoffeeScript 2.7.0
(function() {
  // https://github.com/RonLinu/mc34063.git
  var RIPPLE, calcBtn, calculate, clear_results, format_results, inverter, isValidFloat, show_results, step_down, step_up, str_to_float, validNumbers, withinLimits;

  RIPPLE = 0.1; // default ripple in volts

  window.onload = function() {
    return document.getElementById('vinField').focus();
  };

  calcBtn = document.getElementById('calculate');

  calcBtn.onclick = function() {
    var _, key, label, values;
    // Read fields values
    values = {
      vin: document.getElementById('vinField').value,
      vout: document.getElementById('voutField').value,
      iout: document.getElementById('ioutField').value,
      freq: document.getElementById('freqField').value,
      res1: document.getElementById('res1Field').value
    };
// Restore units labels (from any previous error messages)
    for (key in values) {
      _ = values[key];
      label = document.getElementById(key + "FieldUnit");
      label.innerHTML = label.innerText.split(" ")[0];
      label.style.color = "black";
    }
    if (validNumbers(values) && withinLimits(values)) {
      return calculate(values);
    } else {
      return clear_results();
    }
  };

  // --------------------------------------
  clear_results = function() {
    document.getElementById('results').innerHTML = "";
    document.getElementById('regulator-name').innerHTML = "Regulator name";
    return document.getElementById('theImage').src = "mc34063/splash.png";
  };

  // --------------------------------------
  isValidFloat = function(str) {
    var regex;
    regex = /^[+-]?(\d+\.?\d*|\.\d+)([eE][+-]?\d+)?$/;
    return regex.test(str.trim());
  };

  // --------------------------------------
  str_to_float = function(values) {
    var nums;
    return nums = {
      vin: Number(values.vin),
      vout: Number(values.vout),
      iout: Number(values.iout),
      freq: Number(values.freq),
      res1: Number(values.res1)
    };
  };

  // --------------------------------------
  format_results = function(lmin, ct, cout, rsc, r2, rb) {
    var results;
    return results = {
      lmin: (lmin * 1e6).toFixed(0),
      ct: (ct * 1e12).toFixed(0),
      cout: (cout * 1e6).toFixed(0),
      rsc: rsc.toFixed(1),
      r2: r2.toFixed(1),
      rb: rb.toFixed(0)
    };
  };

  // --------------------------------------
  validNumbers = function(values) {
    var good, key, label, unit, value;
    good = true;
    for (key in values) {
      value = values[key];
      if (!isValidFloat(value)) {
        good = false;
        label = document.getElementById(key + "FieldUnit");
        unit = label.innerText;
        label.innerHTML = `${unit} \u2190 invalid number`;
        label.style.color = "darkred";
      }
    }
    return good;
  };

  // --------------------------------------
  withinLimits = function(values) {
    var nums, ref, ref1, ref2, ref3, ref4, showLimitsError, within;
    showLimitsError = function(id, msg) {
      var label, unit;
      label = document.getElementById(id);
      unit = label.innerText;
      label.innerHTML = `${unit} \u2190 range ${msg}`;
      return label.style.color = "darkred";
    };
    within = true;
    nums = str_to_float(values);
    if (!((5 <= (ref = nums.vin) && ref <= 40))) {
      within = false;
      showLimitsError("vinFieldUnit", "5...40");
    }
    if (!((-40 <= (ref1 = nums.vout) && ref1 <= 40))) {
      within = false;
      showLimitsError("voutFieldUnit", "-40...40");
    }
    if (!((5 <= (ref2 = nums.iout) && ref2 <= 1000))) {
      within = false;
      showLimitsError("ioutFieldUnit", "5...1000");
    }
    if (!((25 <= (ref3 = nums.freq) && ref3 <= 500))) {
      within = false;
      showLimitsError("freqFieldUnit", "25...500");
    }
    if (!((1 <= (ref4 = nums.res1) && ref4 <= 100))) {
      within = false;
      showLimitsError("res1FieldUnit", "1...100");
    }
    return within;
  };

  // --------------------------------------
  show_results = function(r, name, schematic) {
    var footer, results;
    footer = document.getElementById('results');
    results = "<pre>";
    results += `L   = ${r.lmin} uH\n`;
    results += `Ct  = ${r.ct} pF\n`;
    results += `Co  = ${r.cout} uF\n`;
    results += `Rsc = ${r.rsc} Ω\n`;
    results += `R2  = ${r.r2} KΩ\n`;
    if (r.rb === "0") {
      results += "\n";
    } else {
      results += `Rb  = ${r.rb} Ω\n`;
    }
    results += "</pre>";
    footer.innerHTML = results;
    document.getElementById('regulator-name').innerHTML = name;
    return document.getElementById('theImage').src = `mc34063/${schematic}`;
  };

  // --------------------------------------
  calculate = function(values) {
    var nums;
    nums = str_to_float(values);
    if (nums.vout < 0) {
      return inverter(nums);
    } else if (nums.vout < nums.vin) {
      return step_down(nums);
    } else {
      return step_up(nums);
    }
  };

  // --------------------------------------
  step_down = function(n) {
    var cout, ct, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (n.vout + 0.8) / (n.vin - 0.8 - n.vout);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * 2.0;
    lmin = (n.vin - 1 - n.vout) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = ipeak * tontoff / (8 * RIPPLE);
    rsc = 0.33 / ipeak;
    r2 = (n.vout - 1.25) / 1.25 * n.res1; // R1 & R2 are in Kohms
    rb = 0.0;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Stepdown regulator", "step_down.png");
  };

  // --------------------------------------
  step_up = function(n) {
    var cout, ct, ib, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (n.vout + 0.8 - n.vin) / (n.vin - 1);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * (ratio + 1) * 2.0;
    ib = ipeak / 20 + 5e-3;
    lmin = (n.vin - 1) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = (n.iout / 1e3 * ton_max / RIPPLE) * 9;
    rsc = 0.33 / ipeak;
    r2 = ((n.vout - 1.25) / 1.25) * n.res1;
    rb = ((n.vin - 1) - ipeak) * rsc / ib;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Stepup regulator", "step_up.png");
  };

  // --------------------------------------
  inverter = function(n) {
    var cout, ct, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (Math.abs(n.vout) + 0.8) / (n.vin - 0.8 - n.vout);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * 2.0;
    lmin = (n.vin - 0.8) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = (n.iout / 1e3 * ton_max / RIPPLE) * 9;
    rsc = 0.33 / ipeak;
    r2 = ((Math.abs(n.vout) - 1.25) / 1.25) * n.res1;
    rb = 0;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Inverter regulator", "inverter.png");
  };

  // ---------------------------------------------------------------------

  // Do this at start up HERE, not in html file anymore
  clear_results();

}).call(this);
