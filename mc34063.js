// Generated by CoffeeScript 2.7.0
(function() {
  var RIPPLE, areValidNumbers, areWithinLimits, calcBtn, calculate, calculation, clear_results, format_results, inverter, isValidFloat, show_results, step_down, step_up, str_to_float;

  RIPPLE = 0.1; // default ripple in volts

  calcBtn = document.getElementById('calculate');

  calcBtn.onclick = function() {
    return calculate();
  };

  // --------------------------------------
  calculate = function() {
    var values;
    values = {
      input_voltage: document.getElementById('inputVoltage').value,
      output_voltage: document.getElementById('outputVoltage').value,
      output_current: document.getElementById('outputCurrent').value,
      frequency: document.getElementById('frequency').value,
      resistor_R1: document.getElementById('resistorR1').value
    };
    if (areValidNumbers(values) && areWithinLimits(values)) {
      return calculation(values);
    } else {
      return clear_results();
    }
  };

  // --------------------------------------
  isValidFloat = function(str) {
    var regex;
    regex = /^[+-]?(\d+\.?\d*|\.\d+)([eE][+-]?\d+)?$/;
    return regex.test(str.trim());
  };

  // --------------------------------------
  str_to_float = function(values) {
    var nums;
    return nums = {
      vin: Number(values.input_voltage),
      vout: Number(values.output_voltage),
      iout: Number(values.output_current),
      freq: Number(values.frequency),
      res1: Number(values.resistor_R1)
    };
  };

  // --------------------------------------
  format_results = function(lmin, ct, cout, rsc, r2, rb) {
    var results;
    return results = {
      lmin: (lmin * 1e6).toFixed(0),
      ct: (ct * 1e12).toFixed(0),
      cout: (cout * 1e6).toFixed(0),
      rsc: rsc.toFixed(1),
      r2: r2.toFixed(1),
      rb: rb.toFixed(1)
    };
  };

  // --------------------------------------
  areValidNumbers = function(values) {
    var good, key, msg, val;
    msg = '';
    good = true;
    for (key in values) {
      val = values[key];
      if (!isValidFloat(val)) {
        msg += key[0].toUpperCase() + key.slice(1).replace("_", " ") + "<br>";
      }
    }
    if (msg) {
      good = false;
      Swal.fire({
        title: "Fields with invalid number",
        html: `<div style='text-align: center;'>${msg}</div>`,
        icon: "error",
        confirmButtonText: 'OK',
        position: 'top'
      });
    }
    // 'top', 'top-left', 'top-right', 'center', 'center-left',
    // 'center-right', 'bottom', 'bottom-left', and 'bottom-right'
    return good;
  };

  // --------------------------------------
  areWithinLimits = function(values) {
    var msg, nums, ref, ref1, ref2, ref3, ref4, within;
    msg = '';
    within = true;
    nums = str_to_float(values);
    if (!((5 <= (ref = nums.vin) && ref <= 40))) {
      msg += "Input voltage \t(5V to 40V)<br>";
    }
    if (!((-40 <= (ref1 = nums.vout) && ref1 <= 40))) {
      msg += "Output voltage \t(-40V to 40V)<br>";
    }
    if (!((1 <= (ref2 = nums.iout) && ref2 <= 1000))) {
      msg += "Output current \t(1ma to 1000mA)<br>";
    }
    if (!((20 <= (ref3 = nums.freq) && ref3 <= 500))) {
      msg += "Frequency \t\t(20KH to 500KHz)<br>";
    }
    if (!((1 <= (ref4 = nums.res1) && ref4 <= 100))) {
      msg += "Resistor R1 \t\t(1K ot 100K)<br>";
    }
    if (msg) {
      within = false;
      Swal.fire({
        title: "Fields with out-of-limit values",
        html: `<div style='text-align: center;'>${msg}</div>`,
        icon: "error",
        confirmButtonText: 'OK',
        position: 'top'
      });
    }
    return within;
  };

  // --------------------------------------
  show_results = function(r, name, schematic) {
    var results, title, topList;
    topList = document.getElementById('results');
    results = "<pre>";
    results += `L&nbsp;&nbsp;&nbsp;= ${r.lmin} uH\n`;
    results += `Ct&nbsp;&nbsp;= ${r.ct} pF\n`;
    results += `Co&nbsp;&nbsp;= ${r.cout} uF\n`;
    results += `Rsc&nbsp;= ${r.rsc} Ω\n`;
    results += `R2&nbsp;&nbsp;= ${r.r2} KΩ\n`;
    if (r.rb === "0.0") {
      results += "&nbsp;\n";
    } else {
      results += `Rb&nbsp;&nbsp;= ${r.rb} Ω\n`;
    }
    results += "</pre>";
    topList.innerHTML = results;
    title = document.getElementById('regulator-name');
    title.innerHTML = `${name}`;
    return document.getElementById('theImage').src = `mc34063/${schematic}`;
  };

  // --------------------------------------
  clear_results = function() {
    var i, results, title, topList, x;
    topList = document.getElementById('results');
    results = "<pre>";
    for (x = i = 1; i <= 6; x = ++i) {
      results += "&nbsp;\n";
    }
    results += "</pre>";
    topList.innerHTML = results;
    title = document.getElementById('regulator-name');
    title.innerHTML = "Regulator name";
    return document.getElementById('theImage').src = "";
  };

  // --------------------------------------
  calculation = function(values) {
    var nums;
    nums = str_to_float(values);
    if (nums.vout < 0) {
      return inverter(nums);
    } else if (nums.vout < nums.vin) {
      return step_down(nums);
    } else {
      return step_up(nums);
    }
  };

  // --------------------------------------
  step_down = function(n) {
    var cout, ct, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (n.vout + 0.8) / (n.vin - 0.8 - n.vout);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * 2.0;
    lmin = (n.vin - 1 - n.vout) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = ipeak * tontoff / (8 * RIPPLE);
    rsc = 0.33 / ipeak;
    r2 = (n.vout - 1.25) / 1.25 * n.res1; // R1 & R2 are in Kohms
    rb = 0.0;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Stepdown regulator", "step_down.png");
  };

  // --------------------------------------
  step_up = function(n) {
    var cout, ct, ib, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (n.vout + 0.8 - n.vin) / (n.vin - 1);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * (ratio + 1) * 2.0;
    ib = ipeak / 20 + 5e-3;
    lmin = (n.vin - 1) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = (n.iout / 1e3 * ton_max / RIPPLE) * 9;
    rsc = 0.33 / ipeak;
    r2 = ((n.vout - 1.25) / 1.25) * n.res1;
    rb = ((n.vin - 1) - ipeak) * rsc / ib;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Stepup regulator", "step_up.png");
  };

  
  // --------------------------------------
  inverter = function(n) {
    var cout, ct, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (Math.abs(n.vout) + 0.8) / (n.vin - 0.8 - n.vout);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * 2.0;
    lmin = (n.vin - 0.8) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = (n.iout / 1e3 * ton_max / RIPPLE) * 9;
    rsc = 0.33 / ipeak;
    r2 = ((Math.abs(n.vout) - 1.25) / 1.25) * n.res1;
    rb = 0;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Inverter regulator", "inverter.png");
  };

}).call(this);
