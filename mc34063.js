// Generated by CoffeeScript 2.7.0
// https://ronlinu.github.io/ms34063
var RIPPLE, calculate, calculateBtn, clear_results, format_results, getFieldsValues, inverter, isValidFloat, saveBtn, showAlert, show_results, step_down, step_up, str_to_float, withinLimits;

RIPPLE = 0.1; // default ripple in volts

window.onload = function() {
  var key, results1, storedData, value, values;
  // Retrieve fields values from localStorage
  storedData = localStorage.getItem("mc34063");
  if (storedData) {
    values = JSON.parse(storedData);
    results1 = [];
    for (key in values) {
      value = values[key];
      results1.push(document.getElementById(key).value = value);
    }
    return results1;
  }
};

// --------------------------------------
saveBtn = document.getElementById('save');

saveBtn.onclick = function() {
  var values;
  // Save fields values to localStorage
  values = getFieldsValues();
  localStorage.setItem("mc34063", JSON.stringify(values));
  return showAlert('', 'info', 'center', 'Field values ​​have been saved!');
};

// --------------------------------------
calculateBtn = document.getElementById('calculate');

calculateBtn.onclick = function() {
  var values;
  values = getFieldsValues();
  // Clear previous on-screen results (if any)
  clear_results(values);
  if (withinLimits(values)) {
    calculate(values);
    return calculateBtn.disabled = true;
  }
};

// ---------------------------------------------------------------------
showAlert = function(title, icon, textalign, msg) {
  return Swal.fire({
    title: title,
    html: `<div style='text-align: ${textalign}; font-size: 16px;'>${msg}</div>`,
    icon: icon,
    confirmButtonText: 'OK',
    position: 'center',
    focusConfirm: true,
    animation: true
  });
};

(async function() {  // --------------------------------------
  var i, input, inputs, len, msg, onInputChange, title;
  // Event listener to catch input change by user in a field
  onInputChange = function(event) {
    clear_results();
    return calculateBtn.disabled = false;
  };
  // Create an event listener for each input field
  inputs = document.querySelectorAll('form input');
  for (i = 0, len = inputs.length; i < len; i++) {
    input = inputs[i];
    input.addEventListener('input', onInputChange);
  }
  title = "MC34063 calculator";
  msg = `<center>\u00A9 2025 - RonLinu</center><br>
This application calculates the value of all the components required
to build a switching regulator based on the MC34063 chip.
<br><br>
The following configurations are supported:<br>
- Step Down (buck)<br>
- Step Up (boost)<br>
- Inverter`;
  await showAlert(title, '', 'left', msg);
  return document.getElementById('vin').focus();
})();


// --------------------------------------
getFieldsValues = function() {
  var getVal, values;
  getVal = function(id) {
    return document.getElementById(id).value;
  };
  return values = {
    vin: getVal('vin'),
    vout: getVal('vout'),
    iout: getVal('iout'),
    freq: getVal('freq'),
    res1: getVal('res1')
  };
};


// --------------------------------------
clear_results = function(values) {
  var field, key, results1;
  document.getElementById('results').innerHTML = '';
  document.getElementById('regulator-name').innerHTML = 'Regulator name';
  document.getElementById('schematic').src = 'mc34063/splash.png';
// Remove red background color, if any, in all fields
  results1 = [];
  for (key in values) {
    field = document.getElementById(key);
    results1.push(field.style.backgroundColor = '');
  }
  return results1;
};

// --------------------------------------
isValidFloat = function(str) {
  var regex;
  regex = /^[+-]?(\d+\.?\d*|\.\d+)([eE][+-]?\d+)?$/;
  return regex.test(str.trim());
};

// --------------------------------------
str_to_float = function(values) {
  var nums;
  return nums = {
    vin: Number(values.vin),
    vout: Number(values.vout),
    iout: Number(values.iout),
    freq: Number(values.freq),
    res1: Number(values.res1)
  };
};


// --------------------------------------
withinLimits = function(values) {
  var count, msg, nums, ref, ref1, ref2, ref3, ref4, ref5, showLimitsError;
  showLimitsError = function(id) {
    var field;
    count++;
    field = document.getElementById(id);
    return field.style.backgroundColor = "LightPink";
  };
  count = 0;
  nums = str_to_float(values);
  if (!((5 <= (ref = nums.vin) && ref <= 40))) {
    showLimitsError('vin');
  }
  if (!(((-40 <= (ref1 = nums.vout) && ref1 <= -3)) || ((3 <= (ref2 = nums.vout) && ref2 <= 40)))) {
    showLimitsError('vout');
  }
  if (!((5 <= (ref3 = nums.iout) && ref3 <= 1000))) {
    showLimitsError('iout');
  }
  if (!((20 <= (ref4 = nums.freq) && ref4 <= 100))) {
    showLimitsError('freq');
  }
  if (!((1 <= (ref5 = nums.res1) && ref5 <= 50))) {
    showLimitsError('res1');
  }
  if (count) {
    msg = '<br>Value out of range in ';
    msg += count === 1 ? 'one field' : `${count} fields`;
    showAlert('', 'error', 'center', msg);
  }
  return count === 0; // true if all numbers are in within their limits
};


// ---------------------------------------------------------------------
calculate = function(values) {
  var nums;
  nums = str_to_float(values);
  if (nums.vout < 0) {
    return inverter(nums);
  } else if (nums.vout < nums.vin) {
    return step_down(nums);
  } else {
    return step_up(nums);
  }
};

// --------------------------------------
format_results = function(lmin, ct, cout, rsc, r2, rb) {
  var results;
  return results = {
    lmin: (lmin * 1e6).toFixed(0),
    ct: (ct * 1e12).toFixed(0),
    cout: (cout * 1e6).toFixed(0),
    rsc: rsc.toFixed(1),
    r2: r2.toFixed(1),
    rb: rb.toFixed(0)
  };
};


// --------------------------------------
show_results = function(results, name, schematic) {
  var footer, resultStr;
  footer = document.getElementById('results');
  resultStr = '<pre>';
  resultStr += `<u>${name}</u>\n`;
  resultStr += `L   = ${results.lmin} uH (min)\n`;
  resultStr += `Ct  = ${results.ct} pF\n`;
  resultStr += `Co  = ${results.cout} uF (min)\n`;
  resultStr += `Rsc = ${results.rsc} Ω\n`;
  resultStr += `R2  = ${results.r2} KΩ\n`;
  if (results.rb !== "0") {
    resultStr += `Rb  = ${results.rb} Ω\n`;
  }
  resultStr += '</pre>';
  footer.innerHTML = resultStr;
  document.getElementById('regulator-name').innerHTML = name;
  return document.getElementById('schematic').src = `mc34063/${schematic}`;
};

// --------------------------------------
step_down = function(nums) {
  var cout, ct, ipeak, lmin, r2, ratio, rb, resultStr, rsc, toff, ton_max, tontoff;
  ratio = (nums.vout + 0.8) / (nums.vin - 0.8 - nums.vout);
  tontoff = 1.0 / (nums.freq * 1e3);
  toff = tontoff / (ratio + 1);
  ton_max = tontoff - toff;
  ipeak = nums.iout / 1e3 * 2.0;
  lmin = (nums.vin - 1 - nums.vout) / ipeak * ton_max;
  ct = ton_max * 4e-5;
  cout = (ipeak * tontoff) / (8 * RIPPLE);
  rsc = 0.33 / ipeak;
  r2 = (nums.vout - 1.25) / 1.25 * nums.res1; // R1 & R2 are in Kohms
  rb = 0.0;
  resultStr = format_results(lmin, ct, cout, rsc, r2, rb);
  return show_results(resultStr, 'Step-Down regulator', 'step_down.png');
};

// --------------------------------------
step_up = function(nums) {
  var cout, ct, ib, ipeak, lmin, r2, ratio, rb, resultStr, rsc, toff, ton_max, tontoff;
  ratio = (nums.vout + 0.8 - nums.vin) / (nums.vin - 1);
  tontoff = 1.0 / (nums.freq * 1e3);
  toff = tontoff / (ratio + 1);
  ton_max = tontoff - toff;
  ipeak = nums.iout / 1e3 * (ratio + 1) * 2.0;
  ib = ipeak / 20 + 5e-3;
  lmin = (nums.vin - 1) / ipeak * ton_max;
  ct = ton_max * 4e-5;
  cout = (nums.iout / 1e3 * ton_max) / RIPPLE;
  rsc = 0.33 / ipeak;
  r2 = ((nums.vout - 1.25) / 1.25) * nums.res1;
  rb = ((nums.vin - 1) - ipeak) * rsc / ib;
  resultStr = format_results(lmin, ct, cout, rsc, r2, rb);
  return show_results(resultStr, 'Step-Up regulator', 'step_up.png');
};

// --------------------------------------
inverter = function(nums) {
  var cout, ct, ipeak, lmin, r2, ratio, rb, resultStr, rsc, toff, ton, tontoff;
  ratio = (Math.abs(nums.vout) + 0.8) / (nums.vin - 0.8);
  tontoff = 1.0 / (nums.freq * 1e3);
  toff = tontoff / (ratio + 1);
  ton = tontoff - toff;
  ipeak = 2 * nums.iout / 1e3; // 2 * nums.iout * (ratio + 1) 
  lmin = (nums.vin - 0.8) / ipeak * ton;
  ct = ton * 4e-5;
  cout = (nums.iout / 1e3 * ton) / RIPPLE;
  rsc = 0.33 / ipeak;
  r2 = ((Math.abs(nums.vout) - 1.25) / 1.25) * nums.res1;
  rb = 0;
  resultStr = format_results(lmin, ct, cout, rsc, r2, rb);
  return show_results(resultStr, 'Inverter regulator', 'inverter.png');
};
