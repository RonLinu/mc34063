// Generated by CoffeeScript 2.7.0
(function() {
  // https://github.com/RonLinu/mc34063.git
  var RIPPLE, calcBtn, calculate, clear_results, format_results, inverter, isValidFloat, show_results, step_down, step_up, str_to_float, validNumbers, withinLimits;

  RIPPLE = 0.1; // default ripple in volts

  window.onload = function() {
    return document.getElementById('vinField').focus();
  };

  calcBtn = document.getElementById('calculate');

  calcBtn.onclick = function() {
    var values;
    // Read fields values
    values = {
      vin: document.getElementById('vinField').value,
      vout: document.getElementById('voutField').value,
      iout: document.getElementById('ioutField').value,
      freq: document.getElementById('freqField').value,
      res1: document.getElementById('res1Field').value
    };
    // Clear error messages (if any)
    clear_results(values);
    if (validNumbers(values) && withinLimits(values)) {
      return calculate(values);
    }
  };

  // --------------------------------------
  clear_results = function(values) {
    var _, field, key, results1;
    document.getElementById('results').innerHTML = "";
    document.getElementById("results").style.color = "";
    document.getElementById('regulator-name').innerHTML = "Regulator name";
    document.getElementById('theImage').src = "mc34063/splash.png";
    results1 = [];
    for (key in values) {
      _ = values[key];
      field = document.getElementById(key + "Field");
      results1.push(field.style.backgroundColor = "");
    }
    return results1;
  };

  // --------------------------------------
  isValidFloat = function(str) {
    var regex;
    regex = /^[+-]?(\d+\.?\d*|\.\d+)([eE][+-]?\d+)?$/;
    return regex.test(str.trim());
  };

  // --------------------------------------
  str_to_float = function(values) {
    var nums;
    return nums = {
      vin: Number(values.vin),
      vout: Number(values.vout),
      iout: Number(values.iout),
      freq: Number(values.freq),
      res1: Number(values.res1)
    };
  };

  // --------------------------------------
  format_results = function(lmin, ct, cout, rsc, r2, rb) {
    var results;
    return results = {
      lmin: (lmin * 1e6).toFixed(0),
      ct: (ct * 1e12).toFixed(0),
      cout: (cout * 1e6).toFixed(0),
      rsc: rsc.toFixed(1),
      r2: r2.toFixed(1),
      rb: rb.toFixed(0)
    };
  };

  // --------------------------------------
  validNumbers = function(values) {
    var count, field, key, msg, value;
    count = 0;
    for (key in values) {
      value = values[key];
      if (!isValidFloat(value)) {
        count++;
        field = document.getElementById(key + "Field");
        field.style.backgroundColor = "LightPink";
      }
    }
    if (count) {
      msg = "<br>Invalid number in ";
      msg += count === 1 ? "one field" : `${count} fields`;
      document.getElementById('results').innerHTML = msg;
      document.getElementById("results").style.color = "DarkRed";
    }
    return count === 0; // true if all values are valid numbers
  };

  
  // --------------------------------------
  withinLimits = function(values) {
    var count, msg, nums, ref, ref1, ref2, ref3, ref4, ref5, showLimitsError;
    showLimitsError = function(id) {
      var field;
      count++;
      field = document.getElementById(id);
      return field.style.backgroundColor = "LightPink";
    };
    count = 0;
    nums = str_to_float(values);
    if (!((5 <= (ref = nums.vin) && ref <= 40))) {
      showLimitsError("vinField");
    }
    if (!(((-40 <= (ref1 = nums.vout) && ref1 <= -3)) || ((3 <= (ref2 = nums.vout) && ref2 <= 40)))) {
      showLimitsError("voutField");
    }
    if (!((5 <= (ref3 = nums.iout) && ref3 <= 1000))) {
      showLimitsError("ioutField");
    }
    if (!((20 <= (ref4 = nums.freq) && ref4 <= 100))) {
      showLimitsError("freqField");
    }
    if (!((1 <= (ref5 = nums.res1) && ref5 <= 50))) {
      showLimitsError("res1Field");
    }
    if (count) {
      msg = "<br>Value out of range in ";
      msg += count === 1 ? "one field" : `${count} fields`;
      document.getElementById('results').innerHTML = msg;
      document.getElementById("results").style.color = "DarkRed";
    }
    return count === 0; // true if all numbers are in range
  };

  
  // --------------------------------------
  show_results = function(r, name, schematic) {
    var footer, results;
    footer = document.getElementById('results');
    results = "<pre>";
    results += `Lmin = ${r.lmin} uH\n`;
    results += `Ct   = ${r.ct} pF\n`;
    results += `Co   = ${r.cout} uF\n`;
    results += `Rsc  = ${r.rsc} Ω\n`;
    results += `R2   = ${r.r2} KΩ\n`;
    if (r.rb !== "0") {
      results += `Rb   = ${r.rb} Ω\n`;
    }
    results += "</pre>";
    footer.innerHTML = results;
    document.getElementById('regulator-name').innerHTML = name;
    return document.getElementById('theImage').src = `mc34063/${schematic}`;
  };

  // --------------------------------------
  calculate = function(values) {
    var nums;
    nums = str_to_float(values);
    if (nums.vout < 0) {
      return inverter(nums);
    } else if (nums.vout < nums.vin) {
      return step_down(nums);
    } else {
      return step_up(nums);
    }
  };

  // --------------------------------------
  step_down = function(n) {
    var cout, ct, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (n.vout + 0.8) / (n.vin - 0.8 - n.vout);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * 2.0;
    lmin = (n.vin - 1 - n.vout) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = (ipeak * tontoff) / (8 * RIPPLE);
    rsc = 0.33 / ipeak;
    r2 = (n.vout - 1.25) / 1.25 * n.res1; // R1 & R2 are in Kohms
    rb = 0.0;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Stepdown regulator", "step_down.png");
  };

  // --------------------------------------
  step_up = function(n) {
    var cout, ct, ib, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (n.vout + 0.8 - n.vin) / (n.vin - 1);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * (ratio + 1) * 2.0;
    ib = ipeak / 20 + 5e-3;
    lmin = (n.vin - 1) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = (n.iout / 1e3 * ton_max) / RIPPLE;
    rsc = 0.33 / ipeak;
    r2 = ((n.vout - 1.25) / 1.25) * n.res1;
    rb = ((n.vin - 1) - ipeak) * rsc / ib;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Stepup regulator", "step_up.png");
  };

  // --------------------------------------
  inverter = function(n) {
    var cout, ct, ipeak, lmin, r2, ratio, rb, results, rsc, toff, ton_max, tontoff;
    ratio = (Math.abs(n.vout) + 0.8) / (n.vin - 0.8 - n.vout);
    tontoff = 1.0 / (n.freq * 1e3);
    toff = tontoff / (ratio + 1);
    ton_max = tontoff - toff;
    ipeak = n.iout / 1e3 * 2.0;
    lmin = (n.vin - 0.8) / ipeak * ton_max;
    ct = ton_max * 4e-5;
    cout = (n.iout / 1e3 * ton_max) / RIPPLE;
    rsc = 0.33 / ipeak;
    r2 = ((Math.abs(n.vout) - 1.25) / 1.25) * n.res1;
    rb = 0;
    results = format_results(lmin, ct, cout, rsc, r2, rb);
    return show_results(results, "Inverter regulator", "inverter.png");
  };

}).call(this);
